generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Game {
  id                 Int               @id @default(autoincrement())
  bggId              Int?              @unique
  nameEn             String
  nameEs             String
  yearRelease        Int?
  designer           String?
  developer          String?
  minPlayers         Int?
  maxPlayers         Int?
  durationMinutes    Int?
  imageUrl           String?
  thumbnailUrl       String?
  name               String            @default("")
  year               Int?
  minPlayTime        Int?
  maxPlayTime        Int?
  image              String?
  expansions         Int?              @default(0)
  category           String            @default("ranked")
  userRating         Float?            @default(0)
  userVotes          Int               @default(0)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  baseGameExpansions Expansion[]       @relation("BaseGameExpansions")
  gameCategories     GameCategory[]
  descriptions       GameDescription[]
  gameMechanics      GameMechanic[]
  rules              GameRule[]
  userGames          UserGame[]
  userVotesList      UserVote[]

  @@map("games")
}

model Category {
  id               Int            @id @default(autoincrement())
  nameEn           String         @unique
  nameEs           String         @unique
  descriptionEn    String?
  descriptionEs    String?
  parentCategoryId Int?
  parentCategory   Category?      @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  subcategories    Category[]     @relation("CategoryHierarchy")
  gameCategories   GameCategory[]

  @@map("categories")
}

model GameCategory {
  id         Int      @id @default(autoincrement())
  gameId     Int
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  game       Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([gameId, categoryId])
  @@map("game_categories")
}

model Mechanic {
  id            Int            @id @default(autoincrement())
  nameEn        String         @unique
  nameEs        String         @unique
  descriptionEn String?
  descriptionEs String?
  gameMechanics GameMechanic[]

  @@map("mechanics")
}

model GameMechanic {
  id         Int      @id @default(autoincrement())
  gameId     Int
  mechanicId Int
  game       Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  mechanic   Mechanic @relation(fields: [mechanicId], references: [id], onDelete: Cascade)

  @@unique([gameId, mechanicId])
  @@map("game_mechanics")
}

model Expansion {
  id              Int     @id @default(autoincrement())
  baseGameId      Int
  expansionNameEn String
  expansionNameEs String
  yearRelease     Int?
  descriptionEn   String?
  descriptionEs   String?
  imageUrl        String?
  bggId           Int?    @unique
  baseGame        Game    @relation("BaseGameExpansions", fields: [baseGameId], references: [id], onDelete: Cascade)

  @@map("expansions")
}

model GameDescription {
  id               Int     @id @default(autoincrement())
  gameId           Int
  language         String
  shortDescription String?
  fullDescription  String?
  game             Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([gameId, language])
  @@map("game_descriptions")
}

model GameRule {
  id                Int     @id @default(autoincrement())
  gameId            Int
  language          String
  rulesText         String
  rulesHtml         String?
  setupInstructions String?
  victoryConditions String?
  game              Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([gameId, language])
  @@map("game_rules")
}

model User {
  id                 String            @id @default(cuid())
  username           String            @unique
  email              String            @unique
  avatar             String?
  isVerified         Boolean           @default(false)
  isAdmin            Boolean           @default(false)
  joinDate           DateTime          @default(now())
  title              String?
  bio                String?
  favoriteGames      String?
  profileColors      String?
  collectionPhoto    String?
  favoriteCard       String?
  gamesList          String?
  isPrivate          Boolean           @default(false)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  level              Int               @default(1)
  passwordHash       String?
  twoFactorEnabled   Boolean           @default(false)
  twoFactorSecret    String?
  xp                 Int               @default(0)
  chatParticipants   ChatParticipant[] @relation("ChatParticipant")
  createdChats       Chat[]            @relation("ChatCreator")
  comments           Comment[]
  followRequestsSent FollowRequest[]   @relation("UserFollowRequestsSent")
  followRequests     FollowRequest[]   @relation("UserFollowRequests")
  following          Follow[]          @relation("UserFollowing")
  followers          Follow[]          @relation("UserFollowers")
  friendOf           Friendship[]      @relation("FriendOf")
  friends            Friendship[]      @relation("UserFriends")
  galleryImages      GalleryImage[]
  messages           Message[]         @relation("MessageSender")
  posts              Post[]
  reports            Report[]
  twoFactorCodes     TwoFactorCode[]
  gamesOwned         UserGame[]

  @@map("users")
}

model TwoFactorCode {
  id        String   @id @default(cuid())
  userId    String
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_codes")
}

model UserVote {
  id        Int      @id @default(autoincrement())
  gameId    Int
  userId    String
  rating    Int
  createdAt DateTime @default(now())
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([gameId, userId])
  @@map("user_votes")
}

model CatanNomination {
  id          Int                   @id @default(autoincrement())
  mapData     String
  imageData   String
  customRules String
  votes       Int                   @default(0)
  status      String                @default("pending")
  userId      String?
  username    String?
  avatar      String?
  title       String?
  description String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  userVotes   CatanNominationVote[]

  @@map("catan_nominations")
}

model CatanNominationVote {
  id           Int             @id @default(autoincrement())
  nominationId Int
  userId       String
  createdAt    DateTime        @default(now())
  nomination   CatanNomination @relation(fields: [nominationId], references: [id], onDelete: Cascade)

  @@unique([nominationId, userId])
  @@map("catan_nomination_votes")
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  category  String
  authorId  String
  votes     String    @default("{\"upvotes\":0,\"downvotes\":0}")
  replies   Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model GalleryImage {
  id           String   @id @default(cuid())
  title        String
  description  String?
  imageUrl     String
  thumbnailUrl String
  category     String
  authorId     String
  votes        String   @default("{\"upvotes\":0,\"downvotes\":0}")
  views        Int      @default(0)
  downloads    Int      @default(0)
  comments     Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  author       User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("gallery_images")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Report {
  id          String   @id @default(cuid())
  reason      String
  description String?
  reporterId  String
  targetType  String
  targetId    String
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reporter    User     @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model UserGame {
  id      Int      @id @default(autoincrement())
  userId  String
  gameId  Int
  addedAt DateTime @default(now())
  rating  Int?
  notes   String?
  game    Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, gameId])
  @@map("user_games")
}

model Friendship {
  id        Int      @id @default(autoincrement())
  userId    String
  friendId  String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  friend    User     @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade)
  user      User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@map("friendships")
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model FollowRequest {
  id          Int      @id @default(autoincrement())
  requesterId String
  targetId    String
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  requester   User     @relation("UserFollowRequestsSent", fields: [requesterId], references: [id], onDelete: Cascade)
  target      User     @relation("UserFollowRequests", fields: [targetId], references: [id], onDelete: Cascade)

  @@unique([requesterId, targetId])
  @@map("follow_requests")
}

model Chat {
  id           String            @id @default(cuid())
  name         String?
  type         String            @default("direct")
  createdBy    String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  participants ChatParticipant[]
  creator      User?             @relation("ChatCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  messages     Message[]

  @@map("chats")
}

model ChatParticipant {
  id         String    @id @default(cuid())
  chatId     String
  userId     String
  joinedAt   DateTime  @default(now())
  lastReadAt DateTime?
  chat       Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user       User      @relation("ChatParticipant", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@map("chat_participants")
}

model Message {
  id        String    @id @default(cuid())
  chatId    String
  senderId  String
  content   String
  type      String    @default("text")
  replyToId String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  chat      Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  replyTo   Message?  @relation("MessageReply", fields: [replyToId], references: [id], onDelete: Cascade)
  replies   Message[] @relation("MessageReply")
  sender    User      @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model BoardleHint {
  id        Int      @id @default(autoincrement())
  gameName  String
  gameMode  String
  hintText  String
  hintOrder Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([gameName, gameMode, hintOrder])
  @@map("boardle_hints")
}
