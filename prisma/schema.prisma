// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enhanced Game model for comprehensive board game database
model Game {
  id                Int      @id @default(autoincrement())
  bggId             Int?     @unique // BoardGameGeek ID for reference
  
  // Basic Information
  nameEn            String   // English name
  nameEs            String   // Spanish name
  yearRelease       Int?     // Year of release
  designer          String?  // Game designer (from BGG boardgamedesigner)
  developer         String?  // Game developer/publisher (from BGG boardgamepublisher)
  
  // Gameplay Information
  minPlayers        Int?     // Minimum players
  maxPlayers        Int?     // Maximum players
  durationMinutes   Int?     // Average play time in minutes
  
  // Media
  imageUrl          String?  // Main game image
  thumbnailUrl      String?  // Thumbnail image
  
  // Legacy fields for compatibility
  name              String   @default("") // Keeping for backward compatibility
  year              Int?     // Keeping for backward compatibility
  minPlayTime       Int?     // Keeping for backward compatibility
  maxPlayTime       Int?     // Keeping for backward compatibility
  image             String?  // Keeping for backward compatibility
  expansions        Int?     @default(0) // Keeping for backward compatibility
  category          String   @default("ranked") // Keeping for backward compatibility
  userRating        Float?   @default(0) // Keeping for backward compatibility
  userVotes         Int      @default(0) // Keeping for backward compatibility
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  userVotesList     UserVote[]
  gameCategories    GameCategory[]
  gameMechanics     GameMechanic[]
  descriptions      GameDescription[]
  rules             GameRule[]
  baseGameExpansions Expansion[] @relation("BaseGameExpansions")
  userGames         UserGame[]
  
  @@map("games")
}

// Categories for organizing games
model Category {
  id                Int      @id @default(autoincrement())
  nameEn            String   @unique
  nameEs            String   @unique
  descriptionEn     String?
  descriptionEs     String?
  parentCategoryId  Int?     // For subcategories
  parentCategory    Category? @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  subcategories     Category[] @relation("CategoryHierarchy")
  
  // Relations
  gameCategories    GameCategory[]
  
  @@map("categories")
}

// Many-to-many relationship between games and categories
model GameCategory {
  id         Int      @id @default(autoincrement())
  gameId     Int
  categoryId Int
  game       Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@unique([gameId, categoryId])
  @@map("game_categories")
}

// Game mechanics (e.g., "Worker Placement", "Deck Building")
model Mechanic {
  id                Int      @id @default(autoincrement())
  nameEn            String   @unique
  nameEs            String   @unique
  descriptionEn     String?
  descriptionEs     String?
  
  // Relations
  gameMechanics     GameMechanic[]
  
  @@map("mechanics")
}

// Many-to-many relationship between games and mechanics
model GameMechanic {
  id         Int      @id @default(autoincrement())
  gameId     Int
  mechanicId Int
  game       Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  mechanic   Mechanic @relation(fields: [mechanicId], references: [id], onDelete: Cascade)
  
  @@unique([gameId, mechanicId])
  @@map("game_mechanics")
}

// Expansions for games
model Expansion {
  id                Int      @id @default(autoincrement())
  baseGameId        Int      // The game this expands
  expansionNameEn   String   // English expansion name
  expansionNameEs   String   // Spanish expansion name
  yearRelease       Int?     // Year expansion was released
  descriptionEn     String?  // English description
  descriptionEs     String?  // Spanish description
  imageUrl          String?  // Expansion image
  bggId             Int?     @unique // BGG expansion ID
  
  // Relations
  baseGame          Game     @relation("BaseGameExpansions", fields: [baseGameId], references: [id], onDelete: Cascade)
  
  @@map("expansions")
}

// Game descriptions in different languages
model GameDescription {
  id                Int      @id @default(autoincrement())
  gameId            Int
  language          String   // 'en' or 'es'
  shortDescription  String?  // 2-3 sentence summary
  fullDescription   String?  // Detailed description
  
  // Relations
  game              Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
  @@unique([gameId, language])
  @@map("game_descriptions")
}

// Game rules - the most important part!
model GameRule {
  id                Int      @id @default(autoincrement())
  gameId            Int
  language          String   // 'en' or 'es'
  rulesText         String   // Plain text rules
  rulesHtml         String?  // HTML formatted rules
  setupInstructions String?  // How to set up the game
  victoryConditions String?  // How to win
  
  // Relations
  game              Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
  @@unique([gameId, language])
  @@map("game_rules")
}

// User model for authentication and profile management
model User {
  id              String   @id @default(cuid())
  username        String   @unique
  email           String   @unique
  password        String
  avatar          String?  // URL to user's avatar image
  isVerified      Boolean  @default(false)
  isAdmin         Boolean  @default(false)
  joinDate        DateTime @default(now())
  title           String?  // User's current title/rank
  bio             String?  // User's bio/description
  favoriteGames   String?  // JSON string storing favorite game categories
  profileColors   String?  // JSON string storing profile color preferences
  collectionPhoto String?  // Base64 string of collection photo
  favoriteCard    String?  // Base64 string of favorite card
  gamesList       String?  // JSON string storing user's games list
  isPrivate       Boolean  @default(false)  // Privacy setting
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  posts           Post[]
  galleryImages   GalleryImage[]
  comments        Comment[]
  reports         Report[]
  gamesOwned      UserGame[]
  friends         Friendship[] @relation("UserFriends")
  friendOf        Friendship[] @relation("FriendOf")
  following       Follow[] @relation("UserFollowing")
  followers       Follow[] @relation("UserFollowers")
  followRequests  FollowRequest[] @relation("UserFollowRequests")
  followRequestsSent FollowRequest[] @relation("UserFollowRequestsSent")
  chatParticipants ChatParticipant[] @relation("ChatParticipant")
  messages        Message[] @relation("MessageSender")
  createdChats    Chat[] @relation("ChatCreator")

  @@map("users")
}

// Existing models (keeping for compatibility)
model UserVote {
  id        Int      @id @default(autoincrement())
  gameId    Int
  userId    String   // Identificador único del usuario (IP, cookie, etc.)
  rating    Int      // Rating del 1 al 10
  createdAt DateTime @default(now())

  // Relación con el juego
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  // Índice único para evitar votos duplicados
  @@unique([gameId, userId])
  @@map("user_votes")
}

model CatanNomination {
  id           Int      @id @default(autoincrement())
  mapData      String   // JSON string storing terrains, numbers, timestamp
  imageData    String   // Base64 encoded image
  customRules  String   // JSON string storing custom rule settings
  votes        Int      @default(0)
  status       String   @default("pending") // pending, approved, rejected
  userId       String?  // Optional: for future user authentication
  username     String?  // User's display name
  avatar       String?  // User's avatar URL
  title        String?  // Optional: for future map titles
  description  String?  // Optional: for future map descriptions
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relation to votes
  userVotes    CatanNominationVote[]

  @@map("catan_nominations")
}

model CatanNominationVote {
  id                   Int      @id @default(autoincrement())
  nominationId         Int
  userId               String   // User identifier
  createdAt            DateTime @default(now())

  // Relation to nomination
  nomination           CatanNomination @relation(fields: [nominationId], references: [id], onDelete: Cascade)

  // Unique constraint to prevent multiple votes from same user
  @@unique([nominationId, userId])
  @@map("catan_nomination_votes")
}

// Forum posts model
model Post {
  id          String   @id @default(cuid())
  title       String
  content     String
  category    String   // general, strategy, reviews, etc.
  authorId    String
  votes       String   @default("{\"upvotes\":0,\"downvotes\":0}") // JSON string for vote counts
  replies     Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]

  @@map("posts")
}

// Gallery images model
model GalleryImage {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  thumbnailUrl String
  category    String   // the-kings-card, dice-throne, game-setups, etc.
  authorId    String
  votes       String   @default("{\"upvotes\":0,\"downvotes\":0}") // JSON string for vote counts
  views       Int      @default(0)
  downloads   Int      @default(0)
  comments    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("gallery_images")
}

// Comments model
model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// Reports model
model Report {
  id          String   @id @default(cuid())
  reason      String
  description String?
  reporterId  String
  targetType  String   // post, comment, gallery_image, user
  targetId    String
  status      String   @default("pending") // pending, reviewed, resolved
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  reporter    User     @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("reports")
}

// User's game collection
model UserGame {
  id        Int      @id @default(autoincrement())
  userId    String
  gameId    Int
  addedAt   DateTime @default(now())
  rating    Int?     // User's rating 1-10
  notes     String?  // User's notes about the game

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([userId, gameId])
  @@map("user_games")
}

// Friendship system
model Friendship {
  id        Int      @id @default(autoincrement())
  userId    String   // User who initiated the friendship
  friendId  String   // User who is the friend
  status    String   @default("pending") // pending, accepted, blocked
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend    User     @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@map("friendships")
}

// Follow system (like Instagram/Twitter)
model Follow {
  id          Int      @id @default(autoincrement())
  followerId  String   // User who is following
  followingId String   // User being followed
  createdAt   DateTime @default(now())

  // Relations
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

// Follow request system for private profiles
model FollowRequest {
  id          Int      @id @default(autoincrement())
  requesterId String   // User requesting to follow
  targetId    String   // User being requested to follow
  status      String   @default("pending") // pending, accepted, declined
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  requester   User     @relation("UserFollowRequestsSent", fields: [requesterId], references: [id], onDelete: Cascade)
  target      User     @relation("UserFollowRequests", fields: [targetId], references: [id], onDelete: Cascade)

  @@unique([requesterId, targetId])
  @@map("follow_requests")
}

// Chat system
model Chat {
  id          String   @id @default(cuid())
  name        String?  // For group chats
  type        String   @default("direct") // "direct" or "group"
  createdBy   String?  // User who created the group chat
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  messages    Message[]
  participants ChatParticipant[]
  creator     User?    @relation("ChatCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("chats")
}

// Chat participants (for both direct and group chats)
model ChatParticipant {
  id        String   @id @default(cuid())
  chatId    String
  userId    String
  joinedAt  DateTime @default(now())
  lastReadAt DateTime? // Track when user last read messages

  // Relations
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user      User     @relation("ChatParticipant", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@map("chat_participants")
}

// Chat messages
model Message {
  id        String   @id @default(cuid())
  chatId    String
  senderId  String
  content   String
  type      String   @default("text") // "text", "image", "file", etc.
  replyToId String?  // For message replies
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender    User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  replyTo   Message? @relation("MessageReply", fields: [replyToId], references: [id], onDelete: Cascade)
  replies   Message[] @relation("MessageReply")

  @@map("messages")
} 