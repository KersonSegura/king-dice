const { PrismaClient } = require('@prisma/client');\nconst { scrapeUltraBGRules, scrapeGameRules } = require('./scrape-ultrabg-rules');\nconst { scrapeBGGRules, scrapeBGGGameRules } = require('./scrape-bgg-rules');\nconst fs = require('fs').promises;\nconst path = require('path');\n\nconst prisma = new PrismaClient();\n\n/**\n * Get comprehensive statistics about rules in database\n */\nasync function getRulesStats() {\n  try {\n    const totalGames = await prisma.game.count();\n    const gamesWithRules = await prisma.game.count({\n      where: {\n        gameRules: { some: {} }\n      }\n    });\n    \n    const totalRules = await prisma.gameRule.count();\n    const rulesByLanguage = await prisma.gameRule.groupBy({\n      by: ['language'],\n      _count: { id: true }\n    });\n    \n    const gamesWithoutRules = await prisma.game.findMany({\n      where: {\n        gameRules: { none: {} }\n      },\n      select: { id: true, name: true, nameEn: true, bggId: true },\n      take: 20 // Sample of games without rules\n    });\n    \n    return {\n      totalGames,\n      gamesWithRules,\n      gamesWithoutRules: totalGames - gamesWithRules,\n      totalRules,\n      rulesByLanguage,\n      coveragePercentage: ((gamesWithRules / totalGames) * 100).toFixed(1),\n      sampleGamesWithoutRules: gamesWithoutRules\n    };\n  } catch (error) {\n    console.error('‚ùå Error getting rules stats:', error.message);\n    return null;\n  }\n}\n\n/**\n * Display comprehensive rules statistics\n */\nasync function displayRulesStats() {\n  const stats = await getRulesStats();\n  if (!stats) return;\n  \n  console.log('\\nüìä COMPREHENSIVE RULES DATABASE STATISTICS');\n  console.log('=' .repeat(50));\n  console.log(`üìö Total games in database: ${stats.totalGames}`);\n  console.log(`‚úÖ Games with rules: ${stats.gamesWithRules}`);\n  console.log(`‚ùå Games without rules: ${stats.gamesWithoutRules}`);\n  console.log(`üìà Coverage percentage: ${stats.coveragePercentage}%`);\n  console.log(`üìã Total rule entries: ${stats.totalRules}`);\n  \n  console.log('\\nüåç Rules by language:');\n  stats.rulesByLanguage.forEach(lang => {\n    console.log(`  ${lang.language}: ${lang._count.id} rules`);\n  });\n  \n  console.log('\\nüéØ Sample games needing rules:');\n  stats.sampleGamesWithoutRules.slice(0, 10).forEach(game => {\n    const name = game.name || game.nameEn || 'Unknown';\n    const bggInfo = game.bggId ? ` (BGG: ${game.bggId})` : '';\n    console.log(`  - ${name}${bggInfo}`);\n  });\n  \n  return stats;\n}\n\n/**\n * Run UltraBoardGames scraper for games without rules\n */\nasync function runUltraBGScraper() {\n  console.log('\\nüé≤ RUNNING ULTRABOARDGAMES SCRAPER');\n  console.log('=' .repeat(40));\n  \n  try {\n    // Get comprehensive game list\n    const gameList = require('./comprehensive-game-list');\n    const gamesToScrape = gameList.ALL_GAMES;\n    \n    console.log(`üìã UltraBG: Attempting to scrape ${gamesToScrape.length} games...`);\n    \n    let successCount = 0;\n    let failCount = 0;\n    let skippedCount = 0;\n    \n    for (let i = 0; i < gamesToScrape.length; i++) {\n      const gameSlug = gamesToScrape[i];\n      \n      try {\n        const result = await scrapeGameRules(gameSlug, true);\n        if (result) {\n          // Try to save to database (this function is from the UltraBG scraper)\n          const games = await prisma.game.findMany({\n            where: {\n              OR: [\n                { name: { contains: gameSlug.replace('-', ' ') } },\n                { nameEn: { contains: gameSlug.replace('-', ' ') } },\n                { name: { contains: gameSlug } },\n                { nameEn: { contains: gameSlug } }\n              ]\n            }\n          });\n          \n          if (games.length > 0) {\n            const game = games[0];\n            \n            // Check if rules already exist\n            const existingRule = await prisma.gameRule.findFirst({\n              where: { \n                gameId: game.id,\n                language: 'en'\n              }\n            });\n            \n            if (!existingRule) {\n              await prisma.gameRule.create({\n                data: {\n                  gameId: game.id,\n                  language: 'en',\n                  rulesHtml: result.htmlContent,\n                  rulesText: result.htmlContent.replace(/<[^>]*>/g, '')\n                }\n              });\n              console.log(`‚úÖ UltraBG: Created rules for ${game.name || game.nameEn}`);\n              successCount++;\n            } else {\n              console.log(`‚ö†Ô∏è UltraBG: Rules already exist for ${game.name || game.nameEn}`);\n              skippedCount++;\n            }\n          } else {\n            console.log(`‚ö†Ô∏è UltraBG: No matching game found for ${gameSlug}`);\n            skippedCount++;\n          }\n        } else {\n          failCount++;\n        }\n      } catch (error) {\n        if (error.message.includes('404')) {\n          skippedCount++;\n        } else {\n          failCount++;\n        }\n      }\n      \n      // Rate limiting\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Progress report every 25 games\n      if ((i + 1) % 25 === 0) {\n        console.log(`üìä UltraBG Progress: ${i + 1}/${gamesToScrape.length} (‚úÖ${successCount} ‚ùå${failCount} ‚ö†Ô∏è${skippedCount})`);\n      }\n    }\n    \n    console.log(`\\nüìä UltraBG Final Results:`);\n    console.log(`‚úÖ Success: ${successCount}`);\n    console.log(`‚ùå Failed: ${failCount}`);\n    console.log(`‚ö†Ô∏è Skipped: ${skippedCount}`);\n    \n  } catch (error) {\n    console.error('‚ùå UltraBG Scraper error:', error.message);\n  }\n}\n\n/**\n * Run BGG scraper for games with BGG IDs but no rules\n */\nasync function runBGGScraper() {\n  console.log('\\nüéØ RUNNING BOARDGAMEGEEK SCRAPER');\n  console.log('=' .repeat(40));\n  \n  try {\n    // Get games with BGG IDs that don't have rules\n    const gamesWithBGGIds = await prisma.game.findMany({\n      where: {\n        bggId: { not: null },\n        gameRules: { none: {} }\n      },\n      select: { bggId: true, name: true, nameEn: true },\n      take: 100 // Limit to avoid overwhelming BGG\n    });\n    \n    if (gamesWithBGGIds.length === 0) {\n      console.log('‚úÖ No games with BGG IDs need rules!');\n      return;\n    }\n    \n    console.log(`üìã BGG: Found ${gamesWithBGGIds.length} games with BGG IDs needing rules`);\n    \n    const gameIds = gamesWithBGGIds.map(g => ({\n      bggId: g.bggId,\n      name: g.name || g.nameEn\n    }));\n    \n    // Use the BGG scraper\n    await scrapeBGGRules(gameIds, true);\n    \n  } catch (error) {\n    console.error('‚ùå BGG Scraper error:', error.message);\n  }\n}\n\n/**\n * Create additional rule sources scraper for popular rule sites\n */\nasync function scrapeAdditionalSources() {\n  console.log('\\nüåê SCRAPING ADDITIONAL SOURCES');\n  console.log('=' .repeat(40));\n  \n  // List of additional rule sources to try\n  const additionalSources = [\n    {\n      name: 'GameRules.com',\n      baseUrl: 'https://www.gamerules.com',\n      pattern: 'instructions/{game-name}'\n    },\n    {\n      name: 'Rules.net',\n      baseUrl: 'https://www.rules.net',\n      pattern: '{game-name}'\n    },\n    {\n      name: 'HowToPlayIt.com',\n      baseUrl: 'https://www.howtoplayit.com',\n      pattern: '{game-name}-rules'\n    }\n  ];\n  \n  // Get games without rules to try on additional sources\n  const gamesWithoutRules = await prisma.game.findMany({\n    where: {\n      gameRules: { none: {} }\n    },\n    select: { name: true, nameEn: true, id: true },\n    take: 50\n  });\n  \n  console.log(`üéØ Trying additional sources for ${gamesWithoutRules.length} games...`);\n  \n  // This would be expanded with actual scrapers for each source\n  console.log('‚ö†Ô∏è Additional sources scraping not yet implemented');\n  console.log('üí° Future sources to implement:');\n  additionalSources.forEach(source => {\n    console.log(`  - ${source.name}: ${source.baseUrl}`);\n  });\n}\n\n/**\n * Save comprehensive scraping report\n */\nasync function saveScrapingReport(initialStats, finalStats) {\n  const report = {\n    timestamp: new Date().toISOString(),\n    initial: initialStats,\n    final: finalStats,\n    improvement: {\n      newRules: finalStats.totalRules - initialStats.totalRules,\n      newCoverage: finalStats.gamesWithRules - initialStats.gamesWithRules,\n      coverageIncrease: (parseFloat(finalStats.coveragePercentage) - parseFloat(initialStats.coveragePercentage)).toFixed(1)\n    }\n  };\n  \n  const reportPath = `scraped_rules/scraping_report_${Date.now()}.json`;\n  await fs.writeFile(reportPath, JSON.stringify(report, null, 2));\n  console.log(`üìÑ Scraping report saved: ${reportPath}`);\n  \n  return report;\n}\n\n/**\n * Main comprehensive scraping function\n */\nasync function runComprehensiveScraping() {\n  console.log('üöÄ STARTING COMPREHENSIVE RULES SCRAPING');\n  console.log('=' .repeat(60));\n  console.log('‚è∞ This will run all available scrapers to maximize rule coverage');\n  console.log('üåô Perfect for running overnight!\\n');\n  \n  // Get initial stats\n  const initialStats = await displayRulesStats();\n  \n  try {\n    // 1. Run UltraBoardGames scraper (most comprehensive)\n    await runUltraBGScraper();\n    \n    // 2. Run BGG scraper for games with BGG IDs\n    await runBGGScraper();\n    \n    // 3. Try additional sources (placeholder for future)\n    await scrapeAdditionalSources();\n    \n    // Get final stats and create report\n    console.log('\\nüìä FINAL STATISTICS');\n    console.log('=' .repeat(30));\n    const finalStats = await displayRulesStats();\n    \n    const report = await saveScrapingReport(initialStats, finalStats);\n    \n    console.log('\\nüéâ COMPREHENSIVE SCRAPING COMPLETED!');\n    console.log('=' .repeat(40));\n    console.log(`üìà New rules added: ${report.improvement.newRules}`);\n    console.log(`üìä Coverage improved by: ${report.improvement.coverageIncrease}%`);\n    console.log(`üéØ Final coverage: ${finalStats.coveragePercentage}%`);\n    \n  } catch (error) {\n    console.error('üí• Comprehensive scraping error:', error.message);\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n\n// Run the comprehensive scraper\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  const mode = args[0] || 'comprehensive';\n  \n  if (mode === 'stats') {\n    displayRulesStats().then(() => process.exit(0));\n  } else if (mode === 'ultrabg') {\n    runUltraBGScraper().then(() => process.exit(0));\n  } else if (mode === 'bgg') {\n    runBGGScraper().then(() => process.exit(0));\n  } else if (mode === 'comprehensive') {\n    runComprehensiveScraping();\n  } else {\n    console.log('Usage: node comprehensive-rules-scraper.js [stats|ultrabg|bgg|comprehensive]');\n    console.log('  stats        - Show current rules statistics');\n    console.log('  ultrabg      - Run UltraBoardGames scraper only');\n    console.log('  bgg          - Run BoardGameGeek scraper only');\n    console.log('  comprehensive - Run all scrapers (default)');\n  }\n}\n\nmodule.exports = {\n  runComprehensiveScraping,\n  getRulesStats,\n  displayRulesStats\n};
